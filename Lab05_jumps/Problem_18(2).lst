     1                                  bits 32
     2                                  global start
     3                                  extern exit
     4                                  import exit msvcrt.dll
     5                                  
     6                                  segment data use32 class=data
     7                                      ;A: 2, 1, 3, -3
     8                                      ;B: 4, 5, -5, 7
     9                                      ;R: 1, 3, 5, 7
    10 00000000 020103FD                    a db 2,1,3,-3
    11                                      lenA equ $-a
    12 00000004 0405FB07                    b db 4,5,-5,7
    13                                      lenB equ $-b
    14 00000008 00<rept>                    r times lenA+lenB db 0
    15                                      
    16                                  segment code use32 class=code
    17                                      start:
    18 00000000 BE[00000000]                    mov esi, a  ;moves in esi string a
    19 00000005 B904000000                      mov ecx, lenA   ; moves in ecx lenA
    20 0000000A BF[08000000]                    mov edi, r  ;moves in edi string r
    21                                          
    22                                          repeat1:
    23 0000000F 8A06                                mov al,[esi]   ; moves in al byte from esi
    24 00000011 A801                                test al,00000001b   ; performs a fictive and btw. al and 00000001b
    25 00000013 7500                                jnz check_sign1     ; jums to check_sign1 if zf = 0 which means the last bit of al is 1
    26                                              check_sign1:    ; checks if a number is positive
    27 00000015 A880                                    test al,10000000b   ; performs a fictive and btw. al and 10000000b
    28 00000017 7400                                    jz add_number1     ; jums to add_number1 if zf = 1 which means the first bit of al is 0
    29                                          
    30                                              add_number1:    ; adds a number if it s positive and odd
    31 00000019 8807                                    mov [edi],al
    32 0000001B 47                                      inc edi                
    33                                              
    34 0000001C 46                                  inc esi ; moves esi to the next byte in a
    35 0000001D E2F0                                loop repeat1
    36                                      
    37 0000001F BE[04000000]                    mov esi, b  ;moves in esi string b
    38 00000024 B904000000                      mov ecx, lenB   ; moves in ecx lenB
    39                                          repeat2:
    40 00000029 8A06                                mov al,[esi]
    41 0000002B A801                                test al,00000001b   ; performs a fictive and btw. al and 00000001b
    42 0000002D 7500                                jnz check_sign2     ; jums to check_sign2 if zf = 0 which means the last bit of al is 1
    43                                              check_sign2:    ; checks if a number is positive
    44 0000002F A880                                    test al,10000000b   ; performs a fictive and btw. al and 10000000b
    45 00000031 7400                                    jz add_number2     ; jums to add_number2 if zf = 1 which means the first bit of al is 0
    46                                          
    47                                              add_number2:    ; adds a number if it s positive and odd
    48 00000033 8807                                    mov [edi],al
    49 00000035 47                                      inc edi                  
    50                                              
    51 00000036 46                                  inc esi ; moves esi to the next byte in b
    52 00000037 E2F0                                loop repeat2
    53                                  
    54 00000039 6A00                        push dword 0
    55 0000003B FF15[00000000]              call [exit]
    56                                      
    57                                      
    58                                      
    59                                      ;adds all numbers???
