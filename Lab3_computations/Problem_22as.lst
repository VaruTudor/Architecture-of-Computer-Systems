     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; a - byte, b - word, c - double word, d - qword
    14 00000000 11                          a db 11h
    15 00000001 2211                        b dw 1122h
    16 00000003 77889900                    c dd 998877h
    17 00000007 6677889900000000            d dq 99887766h
    18                                      
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; (d+c) - (c+b) - (b+a)
    23                                          ; 1. d+c
    24 00000000 A1[07000000]                    mov eax,[d]     ; eax:= the least important doublew of d
    25 00000005 8B15[0B000000]                  mov edx,[d+4]   ; edx:= the most important doublew of d
    26                                          
    27 0000000B 0305[03000000]                  add eax,[c]
    28 00000011 83D200                          adc edx,0       ; eax:edx:= d+c
    29                                          
    30                                          ; 2. d+c - (c+b)
    31 00000014 8B1D[03000000]                  mov ebx,[c]     ;ebx:= c
    32 0000001A 66031D[01000000]                add bx, [b]     ;ebx:= b+c
    33                                          
    34                                          ; exit(0)
    35 00000021 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    36 00000023 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
